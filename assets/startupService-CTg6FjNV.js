import{s}from"./index-C75Mj7SY.js";const d={async getCurrentStartup(){try{const{data:{user:r}}=await s.auth.getUser();if(!r)return null;const{data:e,error:t}=await s.from("startups").select("*").eq("user_id",r.id).single();if(t)throw t;return e}catch(r){return console.error("Error fetching current startup:",r),null}},async requestCSAssignment(r,e,t,n){try{console.log("🔍 requestCSAssignment called with:",{csCode:r,notes:e,startupId:t,startupName:n});const{data:{user:a}}=await s.auth.getUser();if(!a)return console.log("❌ User not authenticated"),{success:!1,error:"User not authenticated"};let o={id:t,name:n};if(!t||!n){console.log("🔍 Startup details not provided, querying database...");const{data:i,error:l}=await s.from("startups").select("id, name").eq("user_id",a.id).single();if(l||!i)return console.log("❌ Startup not found:",{startupError:l,startup:i}),{success:!1,error:"Startup not found for current user"};o=i}console.log("✅ Using startup:",o),console.log("🔍 Calling create_cs_assignment_request with:",{startup_id_param:o.id,startup_name_param:o.name,cs_code_param:r,notes_param:e});const{data:c,error:u}=await s.rpc("create_cs_assignment_request",{startup_id_param:o.id,startup_name_param:o.name,cs_code_param:r,request_message_param:e});if(console.log("🔍 RPC response:",{data:c,error:u}),u)throw console.log("❌ RPC error:",u),u;return console.log("✅ Request creation result:",c),{success:c}}catch(a){return console.error("❌ Error requesting CS assignment:",a),{success:!1,error:"Failed to request CS assignment"}}},async getCSAssignmentRequests(){try{const{data:{user:r}}=await s.auth.getUser();if(!r)return[];const{data:e,error:t}=await s.from("startups").select("id").eq("user_id",r.id).single();if(t||!e)return[];const{data:n,error:a}=await s.rpc("get_startup_cs_requests",{startup_id_param:e.id});if(a)throw a;return n||[]}catch(r){return console.error("Error fetching CS assignment requests:",r),[]}},async getAvailableCS(){try{const{data:r,error:e}=await s.from("users").select("cs_code, name, email").eq("role","CS").not("cs_code","is",null).order("name");if(e)throw e;return r||[]}catch(r){return console.error("Error fetching available CS:",r),[]}},async updateProfile(r){try{const{data:{user:e}}=await s.auth.getUser();if(!e)return{success:!1,error:"User not authenticated"};const{error:t}=await s.from("startups").update(r).eq("user_id",e.id);if(t)throw t;return{success:!0}}catch(e){return console.error("Error updating startup profile:",e),{success:!1,error:"Failed to update profile"}}},async getComplianceStatus(){try{const r=await this.getCurrentStartup();return(r==null?void 0:r.compliance_status)||null}catch(r){return console.error("Error getting compliance status:",r),null}}};export{d as startupService};
